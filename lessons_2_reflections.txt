1.What happens when you initialise a repository? Why do you need it?

When we initialise a directory (do this by creating a .git file)
(by git init) , we basically now can keep track of commits and changes.
The files in a directory can be added to the repository and hence 
the version conttrol can now be applied(not the right word).
We need it to apply(dammit) version control.

************************************************************************

2.How is the staging area different from the working directory and the
repository? What value do you think it offers ?

The staging area , as the name suggests , is the intermediate "area"
between repository and working directory. It would be natural to 
consider certain specific files to be aletred by a single commit.
For example , lets say there is a directory differnt files for 
differnt recipes.
Files related to cake and baking should be altered in a single commit 
as changes in one can possibly affect the others. 
Whereas a recipe for pizza , having no relationship whatsoever , 
should not be in the same commit as the cake ones. It should have
its own separate commit.

Staging area offers this feature of SELECTING which multiple files(if)
to be under a single commit.

************************************************************************

3.How can you use the staging area to make sure you have one commit per
logical change ?

The use of git diff (all kinds of it) are put to use here. We make some
changes to the file in the working directory and then we can compare
them with the the file versions in the staging area as well as the
versions in the most recent commit.(the latter two will be initially same).
BY comparing the files in staging area and the working directory (git diff), we
can see what changes we have made and then decide which changes to 
include to the staging area.
For example say you made changes to two files(one logical change per
file) , then add only one of the updated files to the staging area
using (git add) and then git commit. And after this the other commit
for another file.
git diff --staged is used to find the differences between the file 
versions in the staging area and the ones in the recent commit.
git reset --hard to discard any changes between the file versions in 
the working directory and the staging area.
 
***********************************************************************

4.What are some situations when branches would be helpful in keeping
your history organized ? How would branches help ?

Branches make it easy to take risks and pursue those experimental features 
you want to add to your main project without affecting its development
in any way.
Say you wanted an extra feature which was initially not a part , you 
add it , commit it and the master file is updated. But then say , you dont 
want to submit this and would like the original file without this feature, 
but with some changes to it. This makes things complicated.(Refer to the 
diagram in the video).
So , instead we create a branch for this experimental change and continue 
to code for it , whle developing the original file simultaneously. If the 
experimental change turns out to be fine , you can merge it to the main
file and voila , not much trouble now.
Everything becomes organized.

*************************************************************************

5.How do diagrams help you to visualize branch structure ?

Oh boy , they are the only way to understand it. Well , it tells you 
what branches originated at what point and what further commits were made on
that branch , master branch or other branches. The diagrams help in understanding 
what will be the output of git log commit when used at different pinnts in different 
branches.
They help a lot.

************************************************************************

6. What is the result of merging two branches together? Why do we 
represent it in the diagram the way we do ?

Merging of branches helps in succesfully incorporating the experimental
changes that you thought of adding to the file. So , if the features 
work in the branch you might wanna add it to the main file. Hence,
merge.
Representing it in the diagrams help in undersatnding the merging 
process better(it's the only way) and what else are you here for,
but understand.

************************************************************************

7. What are the pros and cons of Git's automatic merging vs. always doing merges manually ?

Git's automatic merging saves time and you wont have to waste time
figuring out the changes and their effects. But it doesn't always work.
Cases when two different users have introduced two different changes,
automatic merging is the better option.
But say , they introduced two similar changes , it would be rather
counter-helpful(what's the word , dammit) as the merged code would not
even work. Here , manual merging would help in deciding the more 
efficient change and merge that or incorporate a rather better change.
  
